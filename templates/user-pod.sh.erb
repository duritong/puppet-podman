#!/bin/bash

function pod_stop() {
  running_id=$(/usr/bin/podman pod ps --format '{{.ID}} {{.Name}}' --filter 'name=pod-<%= @sanitised_con_name %>' --filter 'status=running' | /usr/bin/grep -E ' pod-<%= @sanitised_con_name %>$' | cut -d' ' -f 1)
  if [[ ! -z "${running_id}" ]]; then
    echo "Stopping Pod <%= @sanitised_con_name %> - ${running_id}"
    /usr/bin/podman pod stop -t 20 "${running_id}"
    running_id2=$(/usr/bin/podman pod ps --format '{{.ID}} {{.Name}}' --filter 'name=pod-<%= @sanitised_con_name %>' --filter 'status=running' | /usr/bin/grep -E ' pod-<%= @sanitised_con_name %>$' | cut -d' ' -f 1)
    if [[ ! -z "${running_id2}" ]]; then
      running_id="${running_id2}"
      /usr/bin/podman pod kill "${running_id}" > /dev/null
      if [ $? -gt 0 ]; then
        echo "Error while killing running pod!"
        exit 120
      fi
    fi
    /usr/bin/podman pod rm "${running_id}" > /dev/null
  fi
}

function pod_start() {
  pod_id=$(/usr/bin/podman pod ps --format '{{.ID}} {{.Name}}' --filter 'name=pod-<%= @sanitised_con_name %>' | /usr/bin/grep -E ' pod-<%= @sanitised_con_name %>$' | cut -d' ' -f 1)
  if [[ ! -z "${pod_id}" ]]; then
    echo "Pod  <%= @sanitised_con_name %> - ${pod_id} still present. Removing..."
    /usr/bin/podman pod rm -f $pod_id > /dev/null
    if [ $? -gt 0 ]; then
      # maybe it's gone
      pod_id=$(/usr/bin/podman pod ps --format '{{.ID}} {{.Name}}' --filter 'name=pod-<%= @sanitised_con_name %>' | /usr/bin/grep -E ' pod-<%= @sanitised_con_name %>$' | cut -d' ' -f 1)
      if [[ ! -z "${pod_id}" ]]; then
        echo "Error while removing existing pod!"
        exit 120
      fi
    fi
  fi
  echo "Starting Pod <%= @sanitised_con_name %>"
  set -e
<% legacy_podman = @facts['os']['release']['major'].to_i < 8 -%>
<% publish_socket_0_con_name = "socket-#{@publish_socket.keys.first}-#{@sanitised_con_name}"
@publish_socket.keys.each_with_index do |port,i|
  vals = @publish_socket[port]
  dir = vals['dir'] || File.join(@homedir, 'tmp/run')
  mode = vals['mode'] || '0777'
-%>
  [ -e <%= dir %>/<%= port %> ] && rm -f <%= dir %>/<%= port %>
<% unless legacy_podman -%>
  /usr/bin/podman pod create --replace --name pod-<%= @sanitised_con_name %><% if @run_flags['userns'] -%> --userns=<%= @run_flags['userns'] %><% end -%>
<% end %>
  /usr/bin/podman run -d --pod <%= 'new:' if legacy_podman && (i < 1) %>pod-<%= @sanitised_con_name %> --name socket-<%= port %>-<%= @sanitised_con_name %> \
    -v <%= dir %>:/run/pod:rw  \
<% if @run_flags['network'] == 'isolated'
 if i == 0 -%>
    --network=none \
<% else -%>
    --network=container:$(podman ps --format={{.ID}} -f name=<%= publish_socket_0_con_name %>) \
<% end
  elsif !@run_flags['network'].nil? -%>
    --network=<%= @run_flags['network'] %> \
<% end -%>
<% if @run_flags['hostname'] -%>
    --hostname=<%= @run_flags['hostname'] %> \
<% end -%>
    --log-driver=<%= @run_flags['log-driver'] || 'journald' %> \
<% if @run_flags['log-opt'] -%>
    --log-opt=<%= @run_flags['log-opt'] %> \
<% end -%>
    --read-only=true \
    --security-opt=no-new-privileges \
<% if sec_label = vals['security-opt-label-type'] -%>
    --security-opt=label=type:<%= sec_label %>.process \
<% end -%>
    registry.code.immerda.ch/immerda/container-images/socat:7 \
    UNIX-LISTEN:/run/pod/<%= port %>,fork,end-close,reuseaddr,mode=<%= mode %> TCP:127.0.0.1:<%= port %>

<% end -%>
  /usr/bin/podman run -d --pod pod-<%= @sanitised_con_name %> --name <%= @sanitised_con_name %> \
<% Array(@publish).each do |p| -%>
    --publish <%= p %> \
<% end -%>
<% @real_volumes.each do |host_dir,container_dir|
   if host_dir =~ /^tmpfs/ -%>
    --tmpfs <%= container_dir %> \
<% else -%>
    --volume <%= "#{host_dir}:#{container_dir}" %> \
<% end
end -%>
<% Array(@_envs).each do |e| -%>
    --env <%= e %> \
<% end -%>
    --log-driver=<%= @run_flags['log-driver'] || 'journald' %> \
<% if @run_flags['log-opt'] -%>
    --log-opt=<%= @run_flags['log-opt'] %> \
<% end -%>
<% if @run_flags['hostname'] -%>
    --hostname=<%= @run_flags['hostname'] %> \
<% end -%>
<% if @run_flags['user'] -%>
    --user=<%= @run_flags['user'].gsub(/UID/,"#{@uid}").gsub(/GID/,"#{@real_gid}") %> \
<% end -%>
<% if legacy_podman && @run_flags['userns'] -%>
    --userns=<%= @run_flags['userns'] %> \
<% end -%>
<% if @run_flags['network'] == 'isolated' -%>
    --network=container:$(podman ps --format={{.ID}} -f name=<%= publish_socket_0_con_name %>) \
<% elsif !@run_flags['network'].nil? -%>
    --network=<%= @run_flags['network'] %> \
<% end -%>
<% unless @run_flags['read-only'].nil? -%>
    --read-only=<%= @run_flags['read-only'] ? 'true' : 'false' %> \
<% end -%>
<% Array(@run_flags['security-opt']).each do |so| -%>
    --security-opt=<%= so %> \
<% end -%>
<% if @run_flags['security-opt-seccomp'] -%>
    --security-opt=seccomp=<%= @seccomp_file %> \
<% end -%>
<% if @run_flags['security-opt-label-type'] -%>
    --security-opt=label=type:<%= @run_flags['security-opt-label-type'] %>.process \
<% end -%>
<% if @run_flags.key?('systemd') -%>
    --systemd=<%= @run_flags['systemd'] %> \
<% end -%>
    <%= @image %> \
    <% if @command %> <%= @command %><% end %>

    ret=$?
    if [ $ret -gt 0 ]; then
      echo "Error while starting container <%= @sanitised_con_name %>"
      exit $ret
    fi
    cp -f "$(/usr/bin/podman container inspect <%= @sanitised_con_name %> -f '{{.ConmonPidFile}}')" "${XDG_RUNTIME_DIR}/<%= @unique_name %>.pid"
}

if [ "$1" == 'stop' ]; then
  pod_stop
elif [ "$1" == 'start' ]; then
  pod_stop
  pod_start
else
  echo "USAGE: $0 (start|stop)"
  exit 128
fi
